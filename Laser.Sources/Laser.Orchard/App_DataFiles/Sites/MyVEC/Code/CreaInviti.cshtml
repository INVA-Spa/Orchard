@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.ContentManagement.Records;
@using Orchard.Projections.Models;
@using Orchard.Projections.Services;
@using Orchard.Autoroute.Models;
@using Orchard.Autoroute.Services;
@using Orchard.Data;
@using System.Linq;
@using System.Data;
@using System;
@using System.Globalization;
@using System.Collections.Generic;
@using Laser.Orchard.TaskScheduler.Services;
@using Laser.Orchard.TaskScheduler.ViewModels;
@functions{
    Orchard.Data.IRepository<FieldIndexPartRecord> _fieldIndexPartRecord;
    IContentManager _contentManager;
    IScheduledTaskService _scheduledTaskService;
    string retString = "Error"; //possible outcomes: "Error","Ok"
    dynamic visita = null;
    string csv = "";
    string[] rowSeparator = new string[] { "\r\n", "\r", "\n" };
    string[] fieldSeparator = new string[] { ",", ";" };
    dynamic invito = null;
    ContentItem ci = null;
    Orchard.Workflows.Models.WorkflowContext wfCtx = null;
}
@{
    string LogVisita = "";
    //    var watch = System.Diagnostics.Stopwatch.StartNew();
    try {
        wfCtx = Model.Tokens["Workflow"];
        Orchard.Workflows.Services.IWorkflowManager wfManager = Model.OrchardServices.WorkContext.Resolve<Orchard.Workflows.Services.IWorkflowManager>();
        _fieldIndexPartRecord = Model.OrchardServices.WorkContext.Resolve<IRepository<FieldIndexPartRecord>>();
        _scheduledTaskService = Model.OrchardServices.WorkContext.Resolve<IScheduledTaskService>();
        _contentManager = Model.OrchardServices.WorkContext.Resolve<IContentManager>();
        visita = Model.ContentItem;
        string visitaId = string.Format("{{{0}}}", visita.Id);
        // legge il csv con gli invivati
        csv = visita.Visita.CSVlistaInvitati.Value;
        var rows = csv.Split(rowSeparator, StringSplitOptions.RemoveEmptyEntries);
        foreach (var row in rows) {
            string[] fields = row.Split(fieldSeparator, StringSplitOptions.None);
            if (fields.Length > 0) {
                var fieldsQuery = _fieldIndexPartRecord.Table
                                    .Where(f => f.StringFieldIndexRecords.Any(r => r.PropertyName == "SchedaInvito.Visita." && r.Value == visitaId))
                                    .Where(f => f.StringFieldIndexRecords.Any(r => r.PropertyName == "SchedaInvito.Email." && r.Value == fields[0]))
                                    .Select(x => x.ContentItemRecord.Id);
                var ids = fieldsQuery.ToList();
                bool creaInvito = true;
                if (ids.Count > 0) {
                    // sto lavorando con i field, quindi devo verificare se l'invito non è stato eliminato
                    foreach (var id in ids) {
                        ci = Model.OrchardServices.ContentManager.Get(id);
                        if (ci != null) {
                            creaInvito = false;
                            break;
                        }
                    }
                }
                if (creaInvito) {
                    invito = Model.OrchardServices.ContentManager.New("SchedaInvito");
                    Model.OrchardServices.ContentManager.Create(invito, VersionOptions.Draft);
                    invito.SchedaInvito.Visita.Ids = new int[] { visita.Id };
                    invito.SchedaInvito.Email.Value = fields[0];
                    invito.ActivityPart.DateTimeStart = visita.ActivityPart.DateTimeStart;
                    invito.ActivityPart.DateTimeEnd = visita.ActivityPart.DateTimeEnd;
                    invito.ActivityPart.AllDay = visita.ActivityPart.AllDay;
                    invito.SchedaInvito.Cognome.Value = fields[1];
                    invito.SchedaInvito.Nome.Value = fields[2];
                    invito.SchedaInvito.Azienda.Value = fields[3];
                    if (fields[4].ToUpper() == "SI") {
                        invito.SchedaInvito.AbilitaPrenotazioneParcheggio.Value = true;
                    } else if (fields[4].ToUpper() == "NO") {
                        invito.SchedaInvito.AbilitaPrenotazioneParcheggio.Value = false;
                    } else { // se non specificato il default è true
                        invito.SchedaInvito.AbilitaPrenotazioneParcheggio.Value = true;
                    }
                    if (fields.Length > 5) { // campo opzionale per i tornelli
                        if (fields[5].ToUpper() == "SI") {
                            invito.SchedaInvito.AbilitaTornelli.Value = true;
                        } else if (fields[5].ToUpper() == "NO") {
                            invito.SchedaInvito.AbilitaTornelli.Value = false;
                        } else { // se non specificato il default è true
                            invito.SchedaInvito.AbilitaTornelli.Value = true;
                        }
                    }
                    if (fields.Length > 6) { //optional birth date field
                        DateTime dt = DateTime.Now.AddYears(-35); // default value
                        DateTime.TryParseExact(fields[6], "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt);
                        invito.SchedaInvito.DatadiNascita.DateTime = dt;
                    }
                    if (fields.Length > 7) { //optional sex field
                        var sex = "M";
                        if (fields[7].ToUpper() == "F") {
                            sex = fields[7].ToUpper();
                        }
                        invito.SchedaInvito.Sesso.Value = sex;
                    }
                    if (invito.CommonPart.Owner == null) {
                        invito.CommonPart.Owner = visita.CommonPart.Owner;
                    }
                    if (invito.CommonPart.Creator.Value == null) {
                        invito.CommonPart.Creator.Value = visita.CommonPart.Owner.Id;
                    }
                    invito.TitlePart.Title = fields[1] + " " + fields[2] + " - " + visita.TitlePart.Title;
                    invito.AutoroutePart.DisplayAlias = "Schedainvito" + invito.Id.ToString();
                    _contentManager.Publish(invito);
                    LogVisita += DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + " Creato scheda invito -> " + invito.SchedaInvito.Email.Value + Environment.NewLine;
                    // attiva il workflow di update dell'invito per creare le utenze necessarie
                    dynamic ScheduledTaskViewModel = new ScheduledTaskViewModel();
                    ScheduledTaskViewModel.SignalName = "mandainviti";
                    ScheduledTaskViewModel.ContentItemId = invito.Id;
                    ScheduledTaskViewModel.Autodestroy = true;
                    ScheduledTaskViewModel.ScheduledStartUTC = DateTime.UtcNow;
                    var listScheduledTaskViewModel = new List<ScheduledTaskViewModel>();
                    listScheduledTaskViewModel.Add(ScheduledTaskViewModel);
                    _scheduledTaskService.UpdateRecords(listScheduledTaskViewModel);
                    _scheduledTaskService.ScheduleTask(listScheduledTaskViewModel[0]);
                }
            }
        }
        retString = "Ok";
    } catch (Exception ex) {
        wfCtx.SetState("ErrorMessage", ex.Message);
        LogVisita += DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss") + " Errore : Creazione inviti. Si è verificato un errore relativo al contenuto: " + Model.ContentItem.Id + Environment.NewLine;
    } finally {
        Model.ContentItem.Visita.Log.Value += LogVisita;
    }
}
@retString