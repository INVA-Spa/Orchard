@using Orchard;
@using Orchard.Users.Models;
@using Orchard.ContentManagement.Records;
@using Orchard.Projections.Models;
@using Orchard.Projections.Services;
@using Orchard.Data;
@using Orchard.Localization.Services;
@using System.Linq;
@using Newtonsoft.Json.Linq;
@using Orchard.Security;
@using Orchard.ContentManagement;
@using Laser.Orchard.StartupConfig.Handlers;
@using Laser.Orchard.CommunicationGateway.Models;
@using Laser.Orchard.CommunicationGateway.Services;

@functions{
    string retString = "Error"; //possible outcomes: "Error","Ok"
    IContentManager _contentManager;
    IMembershipService _membershipService;
    ILocalizationService _localizationService = null;
    dynamic invito = null;
    dynamic prenotazione = null;
    Orchard.Workflows.Models.WorkflowContext wfCtx = null;
}
@{
    try {
        wfCtx = Model.Tokens["Workflow"];
        invito = Model.ContentItem;
        // resolve services
        _contentManager = Model.OrchardServices.WorkContext.Resolve<IContentManager>();
        _membershipService = Model.OrchardServices.WorkContext.Resolve<IMembershipService>();
        ICommunicationService _communicationService = Model.OrchardServices.WorkContext.Resolve<ICommunicationService>();
        _localizationService = Model.OrchardServices.WorkContext.Resolve<ILocalizationService>();

        int iduser = (int)invito.CommonPart.Creator.Value;
        dynamic RelatedUser = _contentManager.Get(iduser);
        IUser kUser = _membershipService.GetUser((string)RelatedUser.UserPart.UserName);
        dynamic dUser =_contentManager.Get((int)kUser.Id,VersionOptions.Published);
        string targa = Convert.ToString(wfCtx.GetState("Targa"));
        if (targa==""){
            if ((((int[])(dUser.User.ProfilePart.ReservedParking.Ids)).Contains((int)invito.Id)) ){
                int[] val = ((int[])(dUser.ProfilePart.ReservedParking.Ids)).Where(xz=>xz != (int)invito.Id).ToArray();
                dUser.ProfilePart.ReservedParking.Ids = val;
                dUser.VersionRecord.Published = false;
                _contentManager.Publish(dUser);
                _communicationService.UserToContact((IUser)dUser.UserPart);

            }
        }
        else{
            if (!(((int[])(dUser.User.ProfilePart.ReservedParking.Ids)).Contains((int)invito.Id)) ){
                int[] val = ((int[])(dUser.ProfilePart.ReservedParking.Ids)).Concat(new int[] { (int)invito.Id }).ToArray();
                dUser.ProfilePart.ReservedParking.Ids = val;
                dUser.VersionRecord.Published = false;
                _contentManager.Publish(dUser);
                _communicationService.UserToContact((IUser)dUser.UserPart);
            }
        }
        if(invito.SchedaInvito.Prenotazioneparcheggio.Ids.Length > 0) {
            // recupera prenotazione esistente
            prenotazione = Model.OrchardServices.ContentManager.Get(invito.SchedaInvito.Prenotazioneparcheggio.Ids[0], VersionOptions.DraftRequired);
        }
        if(prenotazione == null) {
            // crea nuova prenotazione
            prenotazione = _contentManager.New("Prenotazioneparcheggio");
            _contentManager.Create(prenotazione, VersionOptions.Draft);
            string codPrenotazione = string.Format("PARK00{0}", invito.Id);
            prenotazione.Prenotazioneparcheggio.IDPrenotazione.Value = codPrenotazione;
            invito.SchedaInvito.Prenotazioneparcheggio.Ids = new int[] { prenotazione.Id };
        }
        // aggiorna la targa
        prenotazione.Prenotazioneparcheggio.Targa.Value = targa;
        // aggiorna le date
        prenotazione.ActivityPart.DateTimeStart = invito.ActivityPart.DateTimeStart;
        prenotazione.ActivityPart.DateTimeEnd = invito.ActivityPart.DateTimeEnd;
        prenotazione.ActivityPart.AllDay = invito.ActivityPart.AllDay;
        prenotazione.CommonPart.Owner = dUser.UserPart;
        // salva
        prenotazione.VersionRecord.Published = false;
        _contentManager.Publish(prenotazione);
        // aggiunge il codice prenotazione allo state del workflow
        wfCtx.SetState("CodPrenotazioneParcheggio", prenotazione.Prenotazioneparcheggio.IDPrenotazione.Value);
        // calcola il template da usare per l'email al customer
        var idVisita = invito.SchedaInvito.Visita.Ids[0];
        dynamic visita = _contentManager.Get(idVisita);
        var customTemplateId = "";
        // seleziona l'activit in base al tipo e al destinatario della mail
        var activity = wfCtx.Record.WorkflowDefinitionRecord.ActivityRecords.FirstOrDefault(x => x.Name == "SendTemplatedEmail"
            && x.State.Contains("\"RecipientOther\":\"{Content.Fields.SchedaInvito.Email}\"") 
            && x.State.Contains("\"Recipient\":\"other\""));
        if (activity != null) {
            var state = JObject.Parse(activity.State);
            var templateId = Convert.ToInt32(state["EmailTemplate"]);
            var templateCi = _contentManager.Get(templateId);
            var localizationPart = _localizationService.GetLocalizedContentItem(templateCi, visita.LocalizationPart.Culture.Culture);
            customTemplateId = Convert.ToString(localizationPart.Id);
        }
        wfCtx.SetState("CustomTemplateId", customTemplateId);
        retString = "Ok";
    }
    catch(Exception ex) {
        wfCtx.SetState("ErrorMessage", ex.Message);
    }
}
@retString