@model Laser.Orchard.Mobile.ViewModels.SmsGatewayVM

@{
    Script.Require("LaserOrchardSms").AtHead();
    Script.Require("rcswitcher").AtHead();
    Style.Require("rcswitcher").AtHead();

    bool disabledElements = Model.SmsGateway.SmsMessageSent;

    bool disableHaveAlias = (Model.AliasList == null || Model.AliasList.Count == 0);
    bool isProtocolloSMPP = (Model.Protocollo == Laser.Orchard.Mobile.SmsServiceReference.enumProtocollo.SMPP);
}
@using (Script.Foot()) {
    <script type="text/javascript">

        $(function () {
            $('.rcswitcher-checkbox-sms').rcSwitcher({
                theme: 'flat',
                blobOffset: 1,
                onText: '@T("YES")',
                offText: '@T("NO")'
            }).on({
                'turnon.rcSwitcher': function (e, dataObj) {
                    if (e.target.id == '@Html.FieldIdFor(m => m.SmsGateway.SendToTestNumber)') {
                        $("#test-sms-container").show(400);
                    }
                },
                'turnoff.rcSwitcher': function (e, dataObj) {
                    if (e.target.id == '@Html.FieldIdFor(m => m.SmsGateway.SendToTestNumber)') {
                        $("#test-sms-container").hide(400);
                    }
                }
            });
        });

        $(function () {
            $('.rcswitcher-checkbox-havealias').rcSwitcher({
                theme: 'flat',
                blobOffset: 1,
                onText: '@T("YES")',
                offText: '@T("NO")'
            }).on({
                'turnon.rcSwitcher': function (e, dataObj) {
                    if (e.target.id == '@Html.FieldIdFor(m => m.SmsGateway.HaveAlias)') {
                        if ('@isProtocolloSMPP' == 'True') {
                            $("#alias-sms-container").show(400);
                        }
                    }
                },
                'turnoff.rcSwitcher': function (e, dataObj) {
                    if (e.target.id == '@Html.FieldIdFor(m => m.SmsGateway.HaveAlias)') {
                        $("#alias-sms-container").hide(400);
                    }
                }
            });
        });

        $(function () {
            $("#tab-folder-container ul li a").on('click', function () {
                if ($(this).attr("href") == '#sms-comm-container') {
                    $('#txtTesto').focus();
                }
            });
        });

        $(function () {
            $('#txtTesto').on('focus blur keypress keyup change paste', {
                maxLength: '@Model.MaxLenghtSms',
                txtTesto: $('#txtTesto'),
                lblnumeroMessaggi: $('#lblnumeroMessaggi'),
                lblnumeroChar: $('#lblnumeroChar'),
                shortlinkExist: '@Model.ShortlinkExist'
            }, ControllaMessaggio);
        });

    </script>
}

<div id="sms-comm-container" class="comm-tabbed">

    <div>
        <label for="contChar">@T("Number of chars:")</label>
        <span style="margin-left: 20px">
            @Html.Label("contChar", " ", new { @id = "lblnumeroChar" })
            @if (Model.ShortlinkExist) {
                @T(" + 16 chars campaign shortlink")
            }
        </span>
    </div>
    <div>
        <label for="contMessage">@T("Number of messages:")</label>
        <span style="margin-left: 20px">@Html.Label("contMessage", " ", new { @id = "lblnumeroMessaggi" })</span>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SmsGateway.Message, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.SmsGateway.Message, new { @id = "txtTesto", @class = "text large" })
            @Html.ValidationMessageFor(model => model.SmsGateway.Message)
        </div>
    </div>
    
    @foreach (var ph in Model.Settings.PlaceholdersList.Placeholders) {
        <button name="submit.@ph.Name" id="btn_@ph.Name" onclick="$('#txtTesto').insertAtCaret('[PH_@ph.Name]');return false;">@ph.DisplayName</button>
    }

    <div>
        @Html.LabelFor(m => m.SmsGateway.HaveAlias, T("Have Alias").Text, new { @class = "forcheckbox" })
        @if (!disableHaveAlias) { 
            @Html.CheckBoxFor(model => model.SmsGateway.HaveAlias, new { @class = "rcswitcher-checkbox-havealias" })
        } else {
            @Html.CheckBoxFor(model => model.SmsGateway.HaveAlias, new { @class = "rcswitcher-checkbox-havealias", @disabled = "disabled" })
        }
    </div>

    <div id="alias-sms-container" style="@((!isProtocolloSMPP || !Model.SmsGateway.HaveAlias) ? "display:none;" : "")">
        @Html.LabelFor(m => m.SmsGateway.Alias, T("Alias").Text, new { @class = "forcheckbox" })
        @if (!disableHaveAlias) { 
            @Html.DropDownListFor(model => model.SmsGateway.Alias, new SelectList(Model.AliasList, Model.SmsGateway.Alias))
        }
    </div>

    <div>
        @Html.LabelFor(m => m.SmsGateway.SendToTestNumber, T("Send for test").Text, new { @class = "forcheckbox" })
        @Html.CheckBoxFor(model => model.SmsGateway.SendToTestNumber, new { @class = "rcswitcher-checkbox-sms" })
    </div>

    <div id="test-sms-container" style="@((!Model.SmsGateway.SendToTestNumber) ? "display:none;" : "")">
        @Html.LabelFor(m => m.SmsGateway.NumberForTest, T("Test Sms number").Text, new { @class = "forcheckbox" })
        @Html.TextBoxFor(model => model.SmsGateway.NumberForTest, new { @class = "text medium" })
        <button type="submit" name="submit.Test" value="submit.SmsTest">@T("Send for test")</button>
    </div>

    <div>
        @Html.LabelFor(m => m.SmsGateway.SendOnNextPublish, T("Approved").Text, new { @class = "forcheckbox" })
        @if (!disabledElements) { 
            @Html.CheckBoxFor(model => model.SmsGateway.SendOnNextPublish, new { @class = "rcswitcher-checkbox-sms" }) 
            <i class="fa fa-times-circle" style="color: red"></i> @T("SMS not yet sent.")
        } else {
            @Html.CheckBoxFor(model => model.SmsGateway.SendOnNextPublish, new { @class = "rcswitcher-checkbox-sms", @disabled = "disabled" }) 
            <i class="fa fa-check-circle" style="color: green"></i> @T("SMS already sent.")
        }
        @if (disabledElements) { 
            <div class="message message-Error">@T("This SMS has been already sent. You will be able to edit and save it, but it will not be sent anymore on next publish.")</div>
        }
    </div>

</div>

<div class="tab-folder">
    <a href="#sms-comm-container"><i class="fa fa-phone"></i>@T("Sms")</a>
</div>
