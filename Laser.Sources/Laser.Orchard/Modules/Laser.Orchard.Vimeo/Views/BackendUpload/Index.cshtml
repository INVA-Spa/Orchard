@model Laser.Orchard.Vimeo.ViewModels.BackendUploadViewModel

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    @{
        Script.Require("jQuery").AtFoot();
        Script.Require("jQueryUI").AtFoot();

        Style.Include("orchard-medialibrary-admin.css");
        Style.Include("orchard-mediaproviders-admin.css");
        Style.Include("BackendUpload.css");

        Script.Require("jQueryFileUpload").AtFoot();
        Script.Include("knockout-2.3.0.js").AtFoot();
    }

    @Display.Metas()
    @Display.HeadScripts()
    @Display.HeadLinks()
    @Display.StyleSheetLinks()
</head>
<body>

    <div id="backendupload-main">
        <div id="message">@T("Click here or drop a video file")</div>
        <div id="fileupload">
            <input type="file" id="videoFileInput" name="videoFile" />
        </div>
    </div>

    @Display.FootScripts()
    <script type="text/javascript">
        $(function () {

            var fileInput = document.getElementById("videoFileInput");
            var fileDropArea = document.getElementById("fileupload");

            //when clicking anywhere on the div, trigger the click of the input element
            $('#fileupload').click(function () {
                $('#fileupload > input').trigger('click');
            });
            //when the input gets clicked (even by the above function) make sure nothing else happens
            $('#fileupload > input').click(function (event) {
                event.stopPropagation(); //the event here is the click
            });

            //When we have a file to upload:
            // 1. Verify it is a video
            // 2. Call TryStartUpload on the UploadController
            // 3. Use the url we got to make the upload
            // 4. Verify the upload
            // 5. If required, resume the upload
            // 6. Display a message saying the upload is complete, but some processing will still happen behind the scenes

            fileInput.onchange = function () {
                console.log('tryUpload');
                // 1. Verify it is a video
                if (fileInput.files.length != 0 && fileInput.files[0].type.match(/video.*/)) {
                    console.log('It is a video');
                    startUpload(fileInput.files[0]);
                    fileInput.files.length = 0;
                } else {
                    fileInput.files.length = 0; //we do not need non-video files
                    console.log('CLEAR');
                }
            }

            function handleDragOver(event) {
                event.stopPropagation();
                event.preventDefault();
                event.dataTransfer.dropEffect = 'copy'; // Makes the browser display a "copy" cursor.
            }
            function handleDrop(event) {
                console.log('drop');
                event.stopPropagation();
                event.preventDefault();

                var files = event.dataTransfer.files;
                if (files.length == 0) return;
                var file = files[0];
                // 1. Verify it is a video
                if (file.type.match(/video.*/)) {
                    console.log('It is a video');
                    startUpload(file);
                }
            }

            fileDropArea.addEventListener("dragover", handleDragOver, false);
            fileDropArea.addEventListener("drop", handleDrop, false);

            function startUpload(file) {
                var reader = new FileReader();
                reader.onload = function (fileRead) {
                    //console.log(fileRead);
                    // 2. Call TryStartUpload on the UploadController
                    var url = '@Url.Action("TryStartUpload", "VimeoUpload", new { area = "Laser.Orchard.Vimeo", fileSize = "__fs__" })'
                        .replace('__fs__', file.size);
                    var formData = {
                        @*folderPath: '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.FolderPath))',
                        type: '@HttpUtility.JavaScriptStringEncode(Model.Type)',*@
                        __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
                    }
                    console.log(url);
                    $.ajax({
                        url: url,
                        data: formData,
                        type: "POST",
                        success: function (response) {
                            if (response.Success) {
                                var mId = response.Data.MediaPartId; //the id of the media part, that Imay need later
                                var uUrl = response.Data.uploadUrl; //the upload url
                                //console.log(response);
                                //console.log(mId),
                                console.log(uUrl);
                                var content = fileRead.target.result; //the blob for the file
                                // 3. Use the url we got to make the upload
                                uploadToVimeo(mId, uUrl, file.size, file.type, file);
                            }
                        }
                    });

                };
                reader.readAsDataURL(file);
            }

            function uploadToVimeo(mediaPartId, uploadUrl, fileSize, contentType, blob, offset) {
                console.log('uploadToVimeo');
                var content = blob;
                if (offset) { //this for when we want to implement resumable uploads
                    console.log('offset = ' + offset);
                    content = content.slice(offset, fileSize);
                } else {
                    offset = 0;
                }

                // 3. Use the url we got to make the upload
                var uploadCall = new XMLHttpRequest();
                uploadCall.open('PUT', uploadUrl, true);
                uploadCall.setRequestHeader('Content-Type', contentType);
                uploadCall.setRequestHeader('Content-Range', 'bytes ' + offset + '-' + (fileSize - 1) + '/' + fileSize);
                uploadCall.timeout = 20000;// time in milliseconds
                if (uploadCall.upload) { //i am not 100% about this
                    uploadCall.upload.addEventListener('progress', onProgress);
                }

                uploadCall.onload = function (response) {
                    console.log('success on upload');
                    terminateUpload(mediaPartId, uploadUrl, fileSize, contentType, blob);
                };

                uploadCall.onerror = function (error) {
                    console.log('error on upload');
                };

                uploadCall.onprogress = function () {
                    onProgress;
                };

                uploadCall.ontimeout = function () {
                    verifyAndResume(mediaPartId, uploadUrl, fileSize, contentType, blob);
                };

                uploadCall.send(content);
            }

            function onProgress() {

            }

            function verifyAndResume(mediaPartId, uploadUrl, fileSize, contentType, blob) {
                // 4. Verify the upload
                console.log('verify');
                var sent = 0;
                var verifyCall = new XMLHttpRequest();
                verifyCall.open('PUT', uploadUrl, true);
                verifyCall.setRequestHeader('Content-Range', 'bytes */*'); // + fileSize);
                //verifyCall.setRequestHeader('Content-Type', contentType);
                verifyCall.timeout = 20000;
                verifyCall.onload = function (response) {
                    var range = response.target.getResponseHeader("Range");
                    if (range) {
                        sent = parseInt(range.match(/\d+/g).pop(), 10);
                    }
                    console.log('sent = ' + sent.toString());
                    // 5. If required, resume the upload
                    if (sent < fileSize) {
                        uploadToVimeo(mediaPartId, uploadUrl, fileSize, contentType, blob, sent + 1);
                    } else {
                        //upload finished
                        terminateUpload(mediaPartId, uploadUrl, fileSize, contentType, blob);
                    }
                };
                verifyCall.onerror = function (error) {
                    console.log('error on verify');
                };
                verifyCall.ontimeout = function () {
                    verifyAndResume(mediaPartId, uploadUrl, fileSize, contentType, blob); //try again
                };
                verifyCall.send()
            }

            function terminateUpload(mPId, uploadUrl, fileSize, contentType, blob) {
                console.log('terminate');
                var url = '@Url.Action("FinishUpload", "VimeoUpload", new { area = "Laser.Orchard.Vimeo", mediaPartId = "__id__" })'
                        .replace('__id__', mPId);
                var formData = {
                        __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
                    }
                $.ajax({
                    url: url,
                    data: formData,
                    type: "POST",
                    success: function (response) {
                        if (response.Success) {
                            console.log('Upload complete for media part ' + mPId);
                        } else {
                            if (response.ErrorCode == 4001 || response.ErrorCode == 4003) { 
                                //InProgress || FinishingErrors
                                verifyAndResume(mPId, uploadUrl, fileSize, contentType, blob);
                            } else {
                                alert('@T("Critical error while uploading").ToString()');
                            } 
                        }
                    }
                });
            }

        }())
    </script>
</body>
</html>
