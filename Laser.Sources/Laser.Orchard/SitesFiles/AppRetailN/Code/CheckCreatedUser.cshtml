@using Orchard.ContentManagement;
@using Orchard.Roles.Models;
@using System;
@functions{
    // Se l'utente corrente ha il ruolo BrandAdminB2B, assegna i ruoli StoreAssistant e UserB2B all'utente creato o aggiornato e imposta Dipendente=true.
    // Model.ContentItem è uno User
    string retString = "Error"; //possible outcomes: Error,UpdateRoles,DoNothing
    string eMsg = ""; //used to track errors and put them in the WF state

    private IEnumerable<string> GetUserRolesPart(ContentItem ci) {
        foreach(var part in ci.Parts) {
            if(part.PartDefinition.Name == "UserRolesPart") {
                return (part as UserRolesPart).Roles;
            }
        }
        return new string[0];
    }
}
@{
    if (Model.Tokens["Workflow"].GetState("ErrorMessage") != null) {
        eMsg = Model.Tokens["Workflow"].GetState("ErrorMessage") + Environment.NewLine;
    }
    try {
        // check se deve assegnare i ruoli all'utente
        var ruoliUtente = GetUserRolesPart(Model.OrchardServices.WorkContext.CurrentUser.ContentItem);
        if (ruoliUtente.Contains("BrandAdminB2B")) {
            var ruoliDipendente = GetUserRolesPart(Model.ContentItem);
            var ruoliDiversi = false;
            foreach(var ruolo in ruoliDipendente) {
                if(ruolo != "StoreAssistant" && ruolo != "UserB2B") {
                    ruoliDiversi = true;
                }
            }
            if (ruoliDiversi) {
                retString = "DoNothing";
            } else {
                dynamic usr = Model.ContentItem;
                usr.ProfilePart.Dipendente.Value = true;
                retString = "UpdateRoles";
            }
        } else {
            retString = "DoNothing";
        }
    } catch (Exception ex) {
        eMsg += ex.Message + Environment.NewLine;
        retString = "Error";
    }
    Model.Tokens["Workflow"].SetState("ErrorMessage", eMsg);
}@retString