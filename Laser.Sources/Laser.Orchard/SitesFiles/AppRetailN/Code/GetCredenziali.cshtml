@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.Projections.Services;
@using Orchard.Security;
@using Orchard.Users.Models;
@using Orchard.Users.Services;
@using System.Text.RegularExpressions;
@using System.Web.Security;
@using System.Text;
@using System.Globalization;
@using System.Collections.Generic;
@using System.Linq;

@functions{
    string retString = "Error"; //possile outcomes: Ok,Error
    string eMsg = String.Empty;

    //services
    IUserService _userService;
    IContentManager _contentManager;
    IEncryptionService _encryptionService;

    private string Decrypt(string text) {
        return System.Text.Encoding.Unicode.GetString(_encryptionService.Decode(Convert.FromBase64String(text)));
    }
}
@{
    try {
        // resolve services
        _userService = Model.OrchardServices.WorkContext.Resolve<IUserService>();
        _contentManager = Model.OrchardServices.WorkContext.Resolve<IContentManager>();
        _encryptionService = Model.OrchardServices.WorkContext.Resolve<IEncryptionService>();
        // get the original password
        dynamic item = Model.ContentItem; // Dipendente
        string email = item.Dipendente.Email.Value;
        int userId = Convert.ToInt32(item.Dipendente.UserID.Value);
        dynamic user = _contentManager.Get(userId);
        if (user == null) {
            if (Model.Tokens["Workflow"].GetState("ErrorMessage") != null) {
                eMsg = Model.Tokens["Workflow"].GetState("ErrorMessage") + Environment.NewLine;
            }
            eMsg += string.Format("Non è stato possibile recuperare le credenziali dell'utente con indirizzo email {0}.", email);
            Model.Tokens["Workflow"].SetState("ErrorMessage", eMsg);
        } else {
            string pwd = Decrypt(user.User.OriginalPassword.Value);
            Model.Tokens["Workflow"].SetState("UserName", user.UserPart.UserName);
            Model.Tokens["Workflow"].SetState("Password", pwd);
        }
        retString = "Ok";
    } catch (Exception ex) {
        eMsg += string.Format("\r\n{0}", ex.Message);
        Model.Tokens["Workflow"].SetState("ErrorMessage", eMsg);
    }
}@retString