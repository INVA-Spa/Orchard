@using Orchard;
@using Orchard.Users.Models;
@using Orchard.ContentManagement.Records;
@using Orchard.Projections.Models;
@using Orchard.Projections.Services;
@using Orchard.Data;
@using System.Linq;
@using Orchard.Security;
@using Orchard.ContentManagement;
@using Laser.Orchard.StartupConfig.Handlers;

@functions{
    IContentManager _contentManager;
    IMembershipService _membershipService;
    IContactRelatedEventHandler _contactEventHandler;
    string retString = "Error"; //possible outcomes: "Error","Ok"
    dynamic invito = null;
    dynamic prenotazione = null;
    Orchard.Workflows.Models.WorkflowContext wfCtx = null;
}
@{
    try {
   
        wfCtx = Model.Tokens["Workflow"];
        invito = Model.ContentItem;
        _contentManager = Model.OrchardServices.WorkContext.Resolve<IContentManager>();
        _contactEventHandler = Model.OrchardServices.WorkContext.Resolve<IContactRelatedEventHandler>();
        _membershipService = Model.OrchardServices.WorkContext.Resolve<IMembershipService>();
        int iduser = (int)invito.CommonPart.Creator.Value;
        dynamic RelatedUser = _contentManager.Get(iduser);
        IUser kUser = _membershipService.GetUser((string)RelatedUser.UserPart.UserName);
        dynamic dUser = kUser;
        string targa = Convert.ToString(wfCtx.GetState("Targa"));
        if (targa==""){
             if ((((int[])(dUser.User.ProfilePart.ReservedParking.Ids)).Contains((int)invito.Id)) ){
                 int[] val = ((int[])(dUser.ProfilePart.ReservedParking.Ids)).Where(xz=>xz != (int)invito.Id).ToArray();
                 dUser.ProfilePart.ReservedParking.Ids = val;
                 _contactEventHandler.Synchronize(dUser);
             }
        }
        else{
            if (!(((int[])(dUser.User.ProfilePart.ReservedParking.Ids)).Contains((int)invito.Id)) ){
                int[] val = ((int[])(dUser.ProfilePart.ReservedParking.Ids)).Concat(new int[] { (int)invito.Id }).ToArray();
                dUser.ProfilePart.ReservedParking.Ids = val;
                _contactEventHandler.Synchronize(dUser);
            }
       }
        
       
        if(invito.SchedaInvito.Prenotazioneparcheggio.Ids.Length == 0) {
            // crea nuova prenotazione
            prenotazione = _contentManager.New("Prenotazioneparcheggio");
            _contentManager.Create(prenotazione, VersionOptions.Draft);
            string codPrenotazione = string.Format("PARK00{0}", invito.Id);
            
            prenotazione.Prenotazioneparcheggio.IDPrenotazione.Value = codPrenotazione;
            invito.SchedaInvito.Prenotazioneparcheggio.Ids = new int[] { prenotazione.Id };
        }
        else {
            // recupera prenotazione esistente
            prenotazione = Model.OrchardServices.ContentManager.Get(invito.SchedaInvito.Prenotazioneparcheggio.Ids[0], VersionOptions.DraftRequired);
        }
       
        // aggiorna la targa
        prenotazione.Prenotazioneparcheggio.Targa.Value = targa;
        // aggiorna le date
        prenotazione.ActivityPart.DateTimeStart = invito.ActivityPart.DateTimeStart;
        prenotazione.ActivityPart.DateTimeEnd = invito.ActivityPart.DateTimeEnd;
        prenotazione.ActivityPart.AllDay = invito.ActivityPart.AllDay;
        // salva
        _contentManager.Publish(prenotazione);
        // aggiunge il codice prenotazione allo state del workflow
        wfCtx.SetState("CodPrenotazioneParcheggio", prenotazione.Prenotazioneparcheggio.IDPrenotazione.Value);
        retString = "Ok";
    }
    catch(Exception ex) {
        wfCtx.SetState("ErrorMessage", ex.Message);
    }
}
@retString