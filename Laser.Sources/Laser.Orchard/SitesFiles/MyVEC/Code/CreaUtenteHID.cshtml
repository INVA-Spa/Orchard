@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.Data;
@using Orchard.Projections.Models;
@using Orchard.Projections.Services;
@using Orchard.Security;
@using Orchard.Users.Models;
@using Laser.Orchard.Events.Models;
@using Laser.Orchard.HID;
@using Laser.Orchard.HID.Models;
@using Laser.Orchard.HID.Services;
@using System;
@functions{
    string retString = "Error"; //outcomes: Error,OK
    IHIDAPIService _hidAPIService;
    IContentManager _contentManager;

    string eMsg = String.Empty;

    private void CheckErrors(HIDUser hidResult, dynamic item, IUser guest, bool issuing) {
        //item is the SchedaInvito
        //guest is the guest
        //issuing == true for issuecredential, false for revoke
        string errorBase = string.Format("Errore {0} per invito {1} (id: {2}) all'ospite con email: {3}: {4}",
            issuing ? "nel rilascio credenziali" : "nel rimuovere credenziali",
            _contentManager.GetItemMetadata(item).DisplayText,
            item.Id.ToString(),
            guest.Email,
            @"{0}");
        switch (hidResult.Error) {
            case UserErrors.UnknownError:
                eMsg += string.Format(errorBase, "Errore sconosciuto.") + Environment.NewLine;
                break;
            case UserErrors.AuthorizationFailed:
                eMsg += string.Format(errorBase, "Login fallito sui servizi HID: verifica le impostazioni del modulo.") + Environment.NewLine;
                break;
            case UserErrors.DoesNotHaveDevices:
                eMsg += string.Format(errorBase, "L'utente non ha registrato nessun dispositivo.") + Environment.NewLine;
                break;
            case UserErrors.DoesNotExist:
                eMsg += string.Format(errorBase, "Il sistema HID non ha riconosciuto il dispositivo.") + Environment.NewLine;
                break;
            case UserErrors.PreconditionFailed:
                eMsg += string.Format(errorBase, "Il sistem HID non riconosce i PartNumber.") + Environment.NewLine;
                break;
            case UserErrors.InternalServerError:
                eMsg += string.Format(errorBase, "Errore interno ai sistemi HID") + Environment.NewLine;
                break;
            case UserErrors.NoError:
                break;
        }
    }
}
@{
    if (Model.Tokens["Workflow"].GetState("ErrorMessage") != null) {
        eMsg = Model.Tokens["Workflow"].GetState("ErrorMessage") + Environment.NewLine;
    }
    try {
        //resolve service
        _hidAPIService = Model.OrchardServices.WorkContext.Resolve<IHIDAPIService>();
        _contentManager = Model.OrchardServices.WorkContext.Resolve<IContentManager>();
        dynamic scheda = (dynamic)Model.ContentItem;
        IUser user = ((IUser)_contentManager.Get<UserPart>((int)(scheda.CommonPart.Creator.Value)));
        HIDUser result = _hidAPIService.IssueCredentials(user);
        CheckErrors(result, scheda, user, true);
    } catch (Exception ex) {
        eMsg += ex.Message + Environment.NewLine;
    }
    Model.Tokens["Workflow"].SetState("ErrorMessage", eMsg);
    if (string.IsNullOrWhiteSpace(eMsg)) {
        retString = "OK";
    }
}@retString