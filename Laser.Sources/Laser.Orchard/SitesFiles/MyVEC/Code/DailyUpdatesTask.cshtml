@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.Data;
@using Orchard.Projections.Models;
@using Orchard.Projections.Services;
@using Orchard.Security;
@using Orchard.Users.Models;
@using Laser.Orchard.Events.Models;
@using Laser.Orchard.HID;
@using Laser.Orchard.HID.Models;
@using Laser.Orchard.HID.Services;
@using System;
@using System.Collections.Generic;
@functions{
    string retString = "Error"; //outcomes: Error,OK,ProcessedCredentials
    // parametri di configurazione
    int daysBeforeStart = 5; // 0 => visits starting today only, 1 => visits starting today or tomorrow
    int daysAfterEnd = 2; // 0 => visits ended yesterday only, 1 => visits ended yesterday or the day before yesterday
    // servizi
    IHIDAPIService _hidAPIService;
    IContentManager _contentManager;
    IFieldIndexService _fieldIndexService;
    IRepository<FieldIndexPartRecord> _fieldIndexPartRecord;

    string eMsg = String.Empty;

    //this is what I will pass forward in the state to allow feedback on the credentials that have been issued/revoked
    // <visit.Id, contact.Id, HIDUser, errorText>
    //List<Tuple<int, int, HIDUser, string>> credentialsFeedbackData = null;
    List<int> credentialsFeedbackDataVisitIds = null;
    List<int> credentialsFeedbackDataInviteIds = null;
    List<HIDUser> credentialsFeedbackDataHIDUsers = null;
    List<string> credentialsFeedbackDataErrors = null;

    private string CheckErrors(HIDUser hidResult, dynamic item, IUser guest, bool issuing) {
        //item is the SchedaInvito
        //guest is the guest
        //issuing == true for issuecredential, false for revoke
        string errorBase = string.Format("Errore {0} per invito {1} (id: {2}) all'ospite con email: {3}: {4}",
            issuing ? "nel rilascio credenziali" : "nel rimuovere credenziali",
            _contentManager.GetItemMetadata(item).DisplayText,
            item.Id.ToString(),
            guest.Email,
            @"{0}");
        string errorText = "";
        switch (hidResult.Error) {
            case UserErrors.UnknownError:
                errorText = string.Format(errorBase, "Errore sconosciuto.") + Environment.NewLine;
                break;
            case UserErrors.AuthorizationFailed:
                errorText = string.Format(errorBase, "Login fallito sui servizi HID: verifica le impostazioni del modulo.") + Environment.NewLine;
                break;
            case UserErrors.DoesNotHaveDevices:
                errorText = string.Format(errorBase, "L'utente non ha registrato nessun dispositivo.") + Environment.NewLine;
                break;
            case UserErrors.DoesNotExist:
                errorText = string.Format(errorBase, "Il sistema HID non ha riconosciuto il dispositivo.") + Environment.NewLine;
                break;
            case UserErrors.PreconditionFailed:
                errorText = string.Format(errorBase, "Il sistem HID non riconosce i PartNumber.") + Environment.NewLine;
                break;
            case UserErrors.InternalServerError:
                errorText = string.Format(errorBase, "Errore interno ai sistemi HID") + Environment.NewLine;
                break;
            case UserErrors.NoError:
                break;
        }
        eMsg += errorText;
        return errorText;
    }
}
@{
    if (Model.Tokens["Workflow"].GetState("ErrorMessage") != null) {
        eMsg = Model.Tokens["Workflow"].GetState("ErrorMessage") + Environment.NewLine;
    }
    //credentialsFeedbackData = new List<Tuple<int, int, HIDUser, string>>();
    credentialsFeedbackDataVisitIds = new List<int>();
    credentialsFeedbackDataInviteIds = new List<int>();
    credentialsFeedbackDataHIDUsers = new List<HIDUser>();
    credentialsFeedbackDataErrors = new List<string>();
    try {
        //resolve service
        _hidAPIService = Model.OrchardServices.WorkContext.Resolve<IHIDAPIService>();
        _contentManager = Model.OrchardServices.WorkContext.Resolve<IContentManager>();
        _fieldIndexService = Model.OrchardServices.WorkContext.Resolve<IFieldIndexService>();
        _fieldIndexPartRecord = Model.OrchardServices.WorkContext.Resolve<IRepository<FieldIndexPartRecord>>();
        //Based on DateTime.Now,
        DateTime today = DateTime.Today;
        DateTime yesterday = today.AddDays(-1);
        DateTime tomorrow = today.AddDays(1);
        DateTime dtMaxEnable = tomorrow.AddDays(daysBeforeStart);
        DateTime dtMinDisable = yesterday.AddDays(-daysAfterEnd);
        var query = _contentManager.Query(VersionOptions.Latest).ForType("Visita");
        query = query.Join<ActivityPartRecord>().Where(apr =>
            (apr.DateTimeStart >= today && apr.DateTimeStart < dtMaxEnable) // taday between visit-n and visit
            || (apr.DateTimeEnd < today && apr.DateTimeEnd >= dtMinDisable) // today between visit and visit+n
        );
        var visits = query.List();
        foreach (var visit in visits) {
            //  Update the status of ContentItems of Type Visita.
            dynamic item = visit;
            int credentialAction = 0; //0: do nothing; 1: issue credentials; 2: revoke credentials
            if (item.ActivityPart.DateTimeStart.Date >= today) {
                if (item.ActivityPart.DateTimeStart.Date == today) {
                    //this visit starts today
                    // Set its state to "In corso"
                    item.Visita.Statovisita.Value = "In corso";
                    _fieldIndexService.Set(
                        item.FieldIndexPart,
                        "Visita",
                        "Statovisita",
                        "",
                        "In corso",
                        typeof(string)
                    );
                }
                // Issue credentials for all guests
                credentialAction = 1;
            }
            if (item.ActivityPart.DateTimeEnd.Date < today) {
                //this visit ended yesterday
                // Set its state to "Terminata"
                if (item.Visita.Questionario.Ids.Length > 0) {
                    item.Visita.PushInviata.Value = "Done";
                }
                item.Visita.Statovisita.Value = "Terminata";
                _fieldIndexService.Set(
                    item.FieldIndexPart,
                    "Visita",
                    "Statovisita",
                    "",
                    "Terminata",
                    typeof(string)
                );
                // Revoke credentials for all guests
                credentialAction = 2;
            }
            if (credentialAction > 0) {
                var fieldsQuery = _fieldIndexPartRecord.Table
                    .Where(f => f.StringFieldIndexRecords.Any(r => r.PropertyName == "SchedaInvito.Visita." && r.Value == "{" + visit.Id.ToString() + "}"))
                    .Select(x => x.ContentItemRecord.Id);
                var idsInviti = fieldsQuery.ToList();
                if (idsInviti.Count() == 0) {
                    eMsg += string.Format("Non ci sono inviti correlati a questa visita: {0}", _contentManager.GetItemMetadata(item).DisplayText) + Environment.NewLine;
                }
                foreach (var siId in idsInviti) {
                    dynamic scheda = ((dynamic)Model.OrchardServices.ContentManager.Get(siId));
                    // test if the item is not a deleted one
                    if (scheda != null) {
                        IUser user = ((IUser)_contentManager.Get<UserPart>((int)(scheda.CommonPart.Creator.Value)));
                        HIDUser result = null;
                        string errors = "";
                        if (credentialAction == 1) {
                            result = _hidAPIService.IssueCredentials(user);
                            errors = CheckErrors(result, scheda, user, true);
                        } else if (credentialAction == 2) {
                            result = _hidAPIService.RevokeCredentials(user);
                            errors = CheckErrors(result, scheda, user, true);
                        }
                        credentialsFeedbackDataVisitIds.Add(visit.Id);
                        credentialsFeedbackDataInviteIds.Add(siId);
                        credentialsFeedbackDataHIDUsers.Add(result);
                        credentialsFeedbackDataErrors.Add(errors);
                    }
                }
            }
        }
    } catch (Exception ex) {
        eMsg += ex.Message + Environment.NewLine;
        eMsg += ex.StackTrace + Environment.NewLine;
    }
    Model.Tokens["Workflow"].SetState("ErrorMessage", eMsg);
    if (credentialsFeedbackDataVisitIds.Count() != 0) {
        Model.Tokens["Workflow"].SetState("CredentialsFeedbackDataVisitIds", credentialsFeedbackDataVisitIds);
        Model.Tokens["Workflow"].SetState("CredentialsFeedbackDataInviteIds", credentialsFeedbackDataInviteIds);
        Model.Tokens["Workflow"].SetState("CredentialsFeedbackDataHIDUsers", credentialsFeedbackDataHIDUsers);
        Model.Tokens["Workflow"].SetState("CredentialsFeedbackDataErrors", credentialsFeedbackDataErrors);
        retString = "ProcessedCredentials";
    }else if (string.IsNullOrWhiteSpace(eMsg)) {
        retString = "OK";
    }
}@retString