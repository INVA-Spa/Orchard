@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.ContentManagement.Records;
@using Orchard.Projections.Models;
@using Orchard.Projections.Services;
@using Orchard.Data;
@using System.Linq;
@functions{
    IFieldIndexService _fieldIndexService;
    Orchard.Data.IRepository<FieldIndexPartRecord> _fieldIndexPartRecord;
    IRepository<Laser.Orchard.Questionnaires.Models.UserAnswersRecord> _repoAswers;
    string retString = "Error"; //possible outcomes: "Error","Ok"
    dynamic visita = null;
    dynamic invitoDiRiferimento = null;
    dynamic usr = null;
    DateTime dtUltimaVisita = DateTime.MinValue;
    string questionnaireContext = "";
    Orchard.Workflows.Models.WorkflowContext wfCtx = null;
}
@{
    try {
        wfCtx = Model.Tokens["Workflow"];
        usr = Model.OrchardServices.WorkContext.CurrentUser;
        int usrId = usr.Id;
        int questionnaireId = Model.ContentItem.Id;
        string mail = usr.Email;
        _fieldIndexService = Model.OrchardServices.WorkContext.Resolve<IFieldIndexService>();
        _fieldIndexPartRecord = Model.OrchardServices.WorkContext.Resolve<IRepository<FieldIndexPartRecord>>();
        _repoAswers = Model.OrchardServices.WorkContext.Resolve<IRepository<Laser.Orchard.Questionnaires.Models.UserAnswersRecord>>();
        var qryInviti = _fieldIndexPartRecord.Table
            .Where(f => f.StringFieldIndexRecords.Any(r => r.PropertyName == "SchedaInvito.Email." && r.Value == mail))
            .Select(x => x.ContentItemRecord.Id);
        var ids = qryInviti.ToList();
        foreach(var idInvito in ids){
            dynamic invito = ((dynamic)Model.OrchardServices.ContentManager.Get(idInvito));
            // se l'invito non è stato eliminato esamino la relativa visita
            if(invito != null) {
                visita = ((dynamic)Model.OrchardServices.ContentManager.Get(invito.SchedaInvito.Visita.Ids[0]));
                if(visita.ActivityPart.DateTimeStart > dtUltimaVisita) {
                    dtUltimaVisita = visita.ActivityPart.DateTimeStart;
                    questionnaireContext = visita.TitlePart.Title;
                    invitoDiRiferimento = invito;
                }
            }
        }
        if(invitoDiRiferimento != null) {
            invitoDiRiferimento.SchedaInvito.QuestionarioCompilato.Value = "Done";
            _fieldIndexService.Set(
                invitoDiRiferimento,
                "SchedaInvito",
                "QuestionarioCompilato",
                "",
                "Done",
                typeof(string)
            );
        }
        if (string.IsNullOrWhiteSpace(questionnaireContext) == false) {
            string sessionId = System.Web.HttpContext.Current.Session.SessionID;
            var answers = _repoAswers.Table.Where(x => x.User_Id == usrId
                && x.QuestionnairePartRecord_Id == questionnaireId
                && x.SessionID == sessionId);
            foreach(var rec in answers) {
                rec.Context = questionnaireContext;
                _repoAswers.Update(rec);
            }
        }
        retString = "Ok";
    }
    catch(Exception ex) {
        wfCtx.SetState("ErrorMessage", ex.Message);
    }
}
@retString