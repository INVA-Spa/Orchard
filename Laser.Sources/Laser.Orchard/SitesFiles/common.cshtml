@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Xml;
@using System.Xml.Linq;
@using System.Web;
@using System.Text.RegularExpressions;
@using System.Globalization;

@functions{
    enum NodeTypes
    {
        HasChildren,
        IsNode,
        IsAttribute
    }

    void SpanXDocument(XElement elements)
    {
        NodeTypes nodeType;
         foreach (XElement element in elements.Elements())
        {
            if (element.Descendants().Count() > 0)
            {
                if (element.Descendants().Descendants().Count() > 0)
                {
                    nodeType = NodeTypes.HasChildren;
                }
                else
                {
                    nodeType = NodeTypes.IsNode;
                }
            }
            else
            {
                nodeType = NodeTypes.IsAttribute;
            }
            switch (nodeType) {
                case NodeTypes.HasChildren:
                    aprinodo(element.Name.LocalName);
                    SpanXDocument(element);
                    chiudinodo(element.Name.LocalName);
                    break;
                case NodeTypes.IsNode:
                    aprinodo(element.Name.LocalName);
                    foreach (XElement elementNode in element.Elements()) {
                    if (!string.IsNullOrEmpty(elementNode.Value)){
                        writenode(elementNode.Name.LocalName,elementNode.Value);
                         }
                    }
                    chiudinodo(element.Name.LocalName);
                    break;
                case NodeTypes.IsAttribute:
                    if (!string.IsNullOrEmpty(element.Value)){
                        writenode(element.Name.LocalName,element.Value);
                    }
                    break;
            } 
        }
    }

    void aprinodo(string nodo){
        WriteLiteral( "<" + nodo + ">");
    }

    void chiudinodo(string nodo){
        WriteLiteral( "</" + nodo + ">");
    }

    void writenode(string nodo, string valore) {
        aprinodo( nodo );
        Write( valore);
        chiudinodo( nodo );
    }

    bool Hafiglio(XmlNode nodo, string figlio) {
        bool hafiglio = false;
        foreach (XmlNode nodofiglio in nodo.ChildNodes) {
            if (nodofiglio.Name == figlio) {
                hafiglio = true;
            }
        }
        return hafiglio;
    }

    XmlDocument aggiungipadre(XmlDocument doc,string dalnodo,string padre, string figlio){
            foreach (XmlNode bookToModify in doc.SelectNodes("/" + dalnodo)) {
            if (!Hafiglio(bookToModify, padre)) {
                XmlNode author = doc.CreateElement(padre);
                bookToModify.AppendChild(author);
                foreach(XmlNode node in bookToModify.SelectNodes(figlio)){
                    node.ParentNode.RemoveChild(node);
                    author.AppendChild(node);
                }
            }
        }

        return doc;
    }

    XmlDocument oldaggiungipadre(XmlDocument doc,string dalnodo,string padre, string figlio){
        XmlNode bookToModify  = doc.SelectSingleNode("/"+dalnodo);
        XmlNode author = doc.CreateElement(padre);
        bookToModify.AppendChild(author);
        foreach(XmlNode node in bookToModify.SelectNodes(figlio)){
            node.ParentNode.RemoveChild(node);
            author.AppendChild(node);
        }
        return doc;
    }

    XmlDocument aggiungifiglio(XmlDocument doc,string dalnodo, string figlio){
        foreach (XmlNode bookToModify in doc.SelectNodes("/" + dalnodo)) {
            XmlNode author = doc.CreateElement(figlio);
            author.InnerXml =" ";
            bookToModify.AppendChild(author);
        }
        return doc;
    }

    XmlDocument ToXmlDocument(XDocument xDocument)
    {
        var xmlDocument = new XmlDocument();
        using(var xmlReader = xDocument.CreateReader())
        {
            xmlDocument.Load(xmlReader);
        }
        return xmlDocument;
    }

    XDocument ToXDocument( XmlDocument xmlDocument){		    
        using (var nodeReader = new XmlNodeReader(xmlDocument))
        {
            nodeReader.MoveToContent();
            return XDocument.Load(nodeReader);
        }
    }

    XmlDocument rendinumeric(XmlDocument doc,string dalnodo){
        foreach(XmlNode node in doc.SelectNodes("/"+dalnodo)){
            node.InnerText=":lasernumeric"+node.InnerText+"lasernumeric:";
        }
        return doc;
    }


    void RenameNode(XmlDocument doc,XmlNode e, string newName) {
        XmlNode newNode = doc.CreateNode(e.NodeType, newName, null);
        while (e.HasChildNodes) {
            newNode.AppendChild(e.FirstChild);
        }
        XmlAttributeCollection ac = e.Attributes;
        while (ac.Count > 0) {
            newNode.Attributes.Append(ac[0]);
        }
        XmlNode parent = e.ParentNode;
        parent.ReplaceChild(newNode, e);
       // return doc;
    }

    XmlDocument cambianome(XmlDocument doc,string dalnodo,string nome){
        foreach (XmlNode node in doc.SelectNodes("/" + dalnodo)) {
            RenameNode( doc,node,  nome) ;
        }
        return doc;
    }

    XmlDocument RimuoviNodo(XmlDocument doc,string dalnodo){
        foreach(XmlNode child_to_remove in doc.SelectNodes("/"+dalnodo)){
            //XmlNode child_to_remove = parent.ChildNodes[i]; 
            // move all the children of "child_to_remove" to be the child of their grandfather (== parent)
            while(child_to_remove.HasChildNodes){
                child_to_remove.ParentNode.InsertBefore(child_to_remove.ChildNodes[0], child_to_remove);
            }	
            child_to_remove.ParentNode.RemoveChild(child_to_remove);
        }
        return doc;
    }

    XmlDocument RimuoviFratelli(XmlDocument doc,string nomenodo){
        XmlNode NodoDaTenere  = doc.SelectSingleNode("/"+nomenodo);
        foreach (XmlNode nodo in NodoDaTenere.ParentNode.ChildNodes){
            if (nodo!=NodoDaTenere){
                NodoDaTenere.ParentNode.RemoveChild(nodo);
                return RimuoviFratelli( doc, nomenodo);
            }
        }
        return doc;
    }

    XmlDocument CreaContatore(XmlDocument doc,string dalnodo,string campodacreare){
        int i=0;
        foreach(XmlNode bookToModify in doc.SelectNodes("/"+dalnodo)){
            i++;
            XmlNode contatore = doc.CreateElement(campodacreare);
            contatore.InnerXml = ":lasernumeric"+i.ToString()+"lasernumeric:";
            bookToModify.AppendChild(contatore);
        }
        return doc;
    }

    XmlDocument textreplace(XmlDocument doc,string dalnodo,string da,string a){
        foreach(XmlNode bookToModify in doc.SelectNodes("/"+dalnodo)){
            bookToModify.InnerXml=bookToModify.InnerXml.Replace(da,a);
        }
        return doc;
    }

    XmlDocument generaOriginalId(XmlDocument doc,string dalnodo){
        foreach (XmlNode bookToModify in doc.SelectNodes("/" + dalnodo)) {
            XmlNode author = doc.CreateElement("OriginalId");
            author.InnerXml=":lasernumeric"+bookToModify.ChildNodes[0].Value+"lasernumeric:";
            bookToModify.ParentNode.AppendChild(author);
        }
        return doc;
    }	

    XmlDocument generaid(XmlDocument doc,string dalnodo,Int32 numero){	
        foreach(XmlNode node in doc.SelectNodes("/"+dalnodo)){
            XmlNode author = doc.CreateElement("Id");
            int n;
            bool isNumeric = int.TryParse(node.InnerText, out n);
            author.InnerText=":lasernumeric"+(n+numero).ToString()+"lasernumeric:";
            node.ParentNode.AppendChild(author);
            node.ParentNode.RemoveChild(node);
        }
        return doc;
    }
		

//Patrick
		
    XmlDocument ConvertStringTimeStampToDate(XmlDocument doc, string dalnodo,bool hasMilliseconds=false){
        foreach (XmlNode bookToModify in doc.SelectNodes("/"+dalnodo)) 
        {
            string string_timestamp = bookToModify.ChildNodes[0].Value;
            double result;
            try 
            {
                result = Convert.ToDouble(string_timestamp);
                System.DateTime dtDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc);
				if (hasMilliseconds){
					result=result/1000;     
				}      
			   dtDateTime = dtDateTime.AddSeconds(result).ToLocalTime();
                bookToModify.ChildNodes[0].Value = "#" + dtDateTime.ToString("MM/dd/yyyy HH:mm:ss",CultureInfo.InvariantCulture) + "#";
            }
            catch (FormatException) 
            {
                Console.WriteLine("Unable to convert '{0}' to a Double.", string_timestamp);
            }
            catch (OverflowException) 
            {
                Console.WriteLine("'{0}' is outside the range of a Double.", string_timestamp);
            }
        }
        return doc;
    }
		
    XmlDocument ConvertDateWithFormat(XmlDocument doc, string dalnodo)
    {
        foreach (XmlNode bookToModify in doc.SelectNodes("/"+dalnodo)) 
        { 
            DateTime dateValue;
            string date_string = bookToModify.ChildNodes[0].Value;
            bookToModify.ChildNodes[0].Value = null;
            foreach (CultureInfo cultureInfo in CultureInfo.GetCultures(CultureTypes.AllCultures))
            {
                if (DateTime.TryParse(date_string, cultureInfo, DateTimeStyles.None, out dateValue))
                {
                    bookToModify.ChildNodes[0].Value = ":laserDate" + dateValue.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds + "laserDate:";
                    break;
                }
            }
        }
        return doc;
    }
		
    XmlDocument ConvertArrayOfStringToString(XmlDocument doc, string dalnodo, string nodeName, string newNodeName,bool IsHtml=false)
    {
		string charconcat=",";
		if (IsHtml){
			charconcat="&lt;br/&gt;";
		}
        foreach (XmlNode bookToModify in doc.SelectNodes("/"+dalnodo)) 
        {			
            string mainString = "";
            foreach (XmlNode nodofiglio in bookToModify.SelectNodes(nodeName)) {
                mainString += charconcat + nodofiglio.InnerXml;
				
                nodofiglio.ParentNode.RemoveChild(nodofiglio);
            }
            if (mainString != "") {
            mainString = mainString.Substring(charconcat.Length);
            XmlNode newString = doc.CreateElement(newNodeName);
            newString.InnerXml=mainString;
            bookToModify.AppendChild(newString);
            }
        }
        return doc;
    }
	
    XmlDocument AggiungiShareLink(XmlDocument doc, XmlNode bookToModify, string titolo, string url, string image){
        XmlNode newNode = doc.CreateElement("ShareLinkPart");
        XmlNode textNode = doc.CreateElement("SharedText");
        textNode.InnerXml= titolo;
        XmlNode linkNode = doc.CreateElement("SharedLink");
        linkNode.InnerXml= url;
        XmlNode imageNode = doc.CreateElement("SharedImage");
        imageNode.InnerXml= image;
        newNode.AppendChild(textNode);
        newNode.AppendChild(linkNode);
        newNode.AppendChild(imageNode);
        bookToModify.AppendChild(newNode);
        return doc;
    }


    string StripHTML(string htmlString)
    {
     string pattern = @"<(.|\n)*?>";
     return Regex.Replace(htmlString, pattern, string.Empty);
    }
        
    DateTime? toDate(string dateTimeStr, string dateFmt)
    {
        const DateTimeStyles style=DateTimeStyles.AllowWhiteSpaces;
        DateTime? result = null;
        DateTime dt;
        if (DateTime.TryParseExact(dateTimeStr, dateFmt, 
            CultureInfo.InvariantCulture, style, out dt)) result=dt;
        return result;
    }              

    string UnicodeToUTF8(string strFrom)
    {
        byte[] bytSrc;
        byte[] bytDestination;
        string strTo = String.Empty;
        bytSrc = Encoding.Unicode.GetBytes(strFrom);
        bytDestination = Encoding.Convert(Encoding.Unicode, Encoding.ASCII, bytSrc);
        strTo = Encoding.ASCII.GetString(bytDestination);
        return strTo;
    }


	// esempio di utilizzo
	//	string child_node_name="";
	//string child_node_uri="";
	//string child_node_mimeType="";
	//foreach (XmlNode child_node in mydoc.SelectNodes("//venue/mediaResource")) {
	//	child_node_name="";
	//	child_node_uri="";
	//	child_node_mimeType="";
	//	if (child_node.SelectSingleNode("name")!=null){
	//		child_node_name=child_node.SelectSingleNode("name").InnerText;
	//	}
	//	if (child_node.SelectSingleNode("uri")!=null){
	//		child_node_uri=child_node.SelectSingleNode("uri").InnerText;
	//	}
	//	if (child_node.SelectSingleNode("mimeType")!=null){
	//		child_node_mimeType=child_node.SelectSingleNode("mimeType").InnerText;
	//	}
	//	XmlNode map = InsertImage(mydoc,child_node_uri,child_node_name,child_node_mimeType,"","");
	//	child_node.ParentNode.AppendChild(map);
	//	child_node.ParentNode.RemoveChild(child_node);
	//}
	XmlNode InsertImage(XmlDocument mydoc,string mediaUrl, string title="",string mimeType="",string caption="",string logicalType=""){
		XmlNode MediaPart=mydoc.CreateElement("MediaPart");
		if (title!=""){
			XmlNode Title = mydoc.CreateElement("Title");
			Title.InnerXml=title;
			MediaPart.AppendChild(Title);
		}
		if (mimeType!=""){
			XmlNode MimeType = mydoc.CreateElement("MimeType");
			MimeType.InnerXml=mimeType;
			MediaPart.AppendChild(MimeType);
		}
		if (caption!=""){
			XmlNode Caption = mydoc.CreateElement("Caption");
			Caption.InnerXml=caption;
			MediaPart.AppendChild(Caption);
		}
		if (mediaUrl!=""){
			XmlNode MediaUrl = mydoc.CreateElement("MediaUrl");
			MediaUrl.InnerXml=mediaUrl;
			MediaPart.AppendChild(MediaUrl);
		}
		if (logicalType!=""){
			XmlNode LogicalType = mydoc.CreateElement("LogicalType");
			LogicalType.InnerXml=logicalType;
			MediaPart.AppendChild(LogicalType);
		}
		return MediaPart;
	}
	
	
	
	XmlNode InsertMap(XmlDocument mydoc,string latitude="", string longitude="",string locationInfo=""){
		XmlNode MapPart = mydoc.CreateElement("MapPart");
		if (latitude!=""){
			XmlNode Latitude = mydoc.CreateElement("Latitude");
			Latitude.InnerXml=latitude;
			MapPart.AppendChild(Latitude);
		}
		if (longitude!=""){
			XmlNode Longitude = mydoc.CreateElement("Longitude");
			Longitude.InnerXml=longitude;
			MapPart.AppendChild(Longitude);
		}
		if (locationInfo!=""){
			XmlNode LocationInfo = mydoc.CreateElement("LocationInfo");
			LocationInfo.InnerXml=locationInfo;
			MapPart.AppendChild(LocationInfo);
		}
		return MapPart;
	}
	
	
	
    void instagramParser(){
        XmlDocument mydoc=ToXmlDocument(Model);
        mydoc=cambianome(mydoc,"root/items", "data");
        mydoc=aggiungipadre(mydoc,"root","lista","data");
        mydoc=RimuoviFratelli(mydoc,"root/lista");
        mydoc=cambianome(mydoc,"root/lista/data/filter", "ToRemove");
        mydoc=cambianome(mydoc,"root/lista/data/comments", "ToRemove");
        mydoc=cambianome(mydoc,"root/lista/data/likes", "ToRemove");
        
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/caption")) {
            var captionText = bookToModify.SelectSingleNode("text").InnerText;
            XmlNode caption = mydoc.CreateElement("CaptionText");
            caption.InnerText = captionText;
            bookToModify.ParentNode.AppendChild(caption);
        }
        mydoc=cambianome(mydoc,"root/lista/data/caption", "ToRemove");
        //scelgo i tipi giusti
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/type")) {
            var stringa = bookToModify.ChildNodes[0].Value;
            if (stringa != "image"){
                bookToModify.ParentNode.ParentNode.RemoveChild(bookToModify.ParentNode);
            }
        }
        //elimino i tipi
        mydoc=cambianome(mydoc,"root/lista/data/type", "ToRemove");
        //imposto la data
        mydoc=ConvertStringTimeStampToDate(mydoc, "root/lista/data/created_time");
        //scelgo l immagine piu bella
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/images/standard_resolution/url")) {
            XmlNode image = mydoc.CreateElement("ImageURL");
            image.InnerXml=bookToModify.ChildNodes[0].Value;
            bookToModify.ParentNode.ParentNode.ParentNode.AppendChild(image);
        }
        //elimino tutte le immagini
        mydoc=cambianome(mydoc,"root/lista/data/images", "ToRemove");
        //scelgo le info dell utente
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/user")) {
            XmlNode username = mydoc.CreateElement("Username");
            username.InnerXml=bookToModify["username"].InnerText;
            bookToModify.ParentNode.AppendChild(username);
            XmlNode profileIMG = mydoc.CreateElement("ProfilePictureURL");
            profileIMG.InnerXml=bookToModify["profile_picture"].InnerText;
            bookToModify.ParentNode.AppendChild(profileIMG);
        }
        //elimino tutte le info utente
        mydoc=cambianome(mydoc,"root/lista/data/user", "ToRemove");
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/users_in_photo")) {
            bookToModify.ParentNode.RemoveChild(bookToModify);
        }
        //sistemo i tags
        mydoc=ConvertArrayOfStringToString(mydoc,"root/lista/data", "tags", "NuoviTag");
        //Converto in orginalID
        mydoc=cambianome(mydoc,"root/lista/data/id", "OriginalId");
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/OriginalId")) {
            var stringa = bookToModify.ChildNodes[0].Value;
            XmlNode identifier = mydoc.CreateElement("Sid");
            identifier.InnerXml="Instagram:" + stringa;
            bookToModify.ParentNode.AppendChild(identifier);
        }
        //genero id univoco per istanza
        mydoc=rendinumeric(mydoc, "root/lista/data/Id");
        foreach (XmlNode bookToModify in mydoc.SelectNodes("/root/lista/data/location")) {
            XmlNode mapPart = mydoc.CreateElement("MapPart");
            mapPart.InnerXml= "";
            XmlNodeList lat = bookToModify.SelectNodes("latitude");
            if (lat.Count > 0){
              XmlNode latitude = mydoc.CreateElement("Latitude");
              latitude.InnerXml= lat[0].InnerXml;
              mapPart.AppendChild(latitude);
            }
            XmlNodeList longi = bookToModify.SelectNodes("longitude");
            if (longi.Count > 0){
              XmlNode longitude = mydoc.CreateElement("Longitude");
              longitude.InnerXml= longi[0].InnerXml;
              mapPart.AppendChild(longitude);
            }
            XmlNodeList nameMap = bookToModify.SelectNodes("name");
            if (nameMap.Count > 0){
              XmlNode locInfo = mydoc.CreateElement("LocationInfo");
              locInfo.InnerXml= nameMap[0].InnerXml;
              mapPart.AppendChild(locInfo);
            }
            bookToModify.ParentNode.AppendChild(mapPart);
        }
        mydoc=cambianome(mydoc,"root/lista/data/location", "ToRemove");
        mydoc=cambianome(mydoc,"root/lista/data/created_time", "DateCreation");
        mydoc=cambianome(mydoc,"root/lista/data/link", "LinkURL");
        mydoc=cambianome(mydoc,"root/lista/data", "Instagram");
        mydoc=cambianome(mydoc,"root/lista", "ToRemove");
        SpanXDocument(ToXDocument(mydoc).Root);
    }
}        
