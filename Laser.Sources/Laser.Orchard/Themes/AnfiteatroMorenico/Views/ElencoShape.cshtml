@using Orchard.Utility.Extensions;
@using Orchard.Environment.Configuration

@{
    var settings = WorkContext.Resolve<ShellSettings>();
    var prefix = settings.RequestUrlPrefix;
}
@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string NormalizeUrl(string url, string prefix) {
        return url.StartsWith("~") ? Url.Content(url.StartsWith("~/" + prefix) ? url : url.Replace("~", "~/" + prefix)) : url;
    }
}
@{

    Model.Classes.Add("content-item");

    var contentTypeClassName = ((string)Model.ContentItem.ContentType).HtmlClassify();
    Model.Classes.Add(contentTypeClassName);

    var tag = Tag(Model, "article");
    var i = 0;

    if (Request.Url.LocalPath.Contains("/eventi")) {
        if (String.IsNullOrWhiteSpace(Request.QueryString["datainizio"])) {
            var url = "";
            var urlPattern = "~/eventi?datainizio={0}&datafine={1}";
            url = String.Format(urlPattern,
                DateTime.Today.ToString("dd/MM/yyyy"),
                DateTime.Today.ToString("dd/MM/yyyy"));
            url = NormalizeUrl(url, prefix);

            Response.Redirect(url);
        }
    }
    //WorkContext.Layout.Zones["AsideSecond"].Items.Clear();
    //WorkContext.Layout.Zones["AsideSecond"].Add(New.RicercaEventiForm(ContentItem: Model.ContentItem), "0");
    var contentItems = Model.ContentItems;
    if (contentItems == null || (contentItems as IEnumerable<dynamic>).Count() == 0) {
    @T("No contents found!")
    }

}
@foreach (var item in contentItems) {
    @Display(BuildDisplay(item, "Summary").ListIndex(i))
    i++;
}
