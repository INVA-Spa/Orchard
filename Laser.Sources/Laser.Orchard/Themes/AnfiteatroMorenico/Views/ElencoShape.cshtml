@using Orchard.Utility.Extensions;
@using Orchard.Environment.Configuration

@{
    var settings = WorkContext.Resolve<ShellSettings>();
    var prefix = settings.RequestUrlPrefix;
    var langPattern = WorkContext.CurrentCulture == "it-IT" ? "" : WorkContext.CurrentCulture + "/";
}
@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string NormalizeUrl(string url, string prefix) {
        return url.StartsWith("~") ? Url.Content(url.StartsWith("~/" + prefix) ? url : url.Replace("~", "~/" + prefix)) : url;
    }
}
@{

    Model.Classes.Add("content-item");

    var contentTypeClassName = ((string)Model.ContentItem.ContentType).HtmlClassify();
    Model.Classes.Add(contentTypeClassName);

    var tag = Tag(Model, "article");
    var i = 0;

    var localPath = Request.Url.LocalPath;
    var synteticQs = Request.QueryString["datainizio"] ?? "" +
        Request.QueryString["datafine"] ?? "";
    var termIds = Request.QueryString["termids"] ?? "";
    if (localPath.Contains("/eventi-search")) {
        //if there is no start or end date, redirect to the "main" path
        if (string.IsNullOrWhiteSpace(synteticQs)) {
            var url = "";
            var urlPattern = "~/{0}eventi{1}";
            url = String.Format(urlPattern,
                langPattern,
                string.IsNullOrWhiteSpace(termIds) ? "" : "?termids=" + termIds
                );
            url = NormalizeUrl(url, prefix);
            Response.Redirect(url);
        }
    } else if (localPath.Contains("/eventi")) {
        //if there is  start or end date, redirect to the "search" path
        if (!string.IsNullOrWhiteSpace(synteticQs)) {
            var url = "";
            var urlPattern = "~/{0}eventi-search?{1}{2}{3}";
            url = String.Format(urlPattern,
                langPattern,
                string.IsNullOrWhiteSpace(Request.QueryString["datainizio"]) ? "" : "datainizio=" + Request.QueryString["datainizio"] + "&",
                string.IsNullOrWhiteSpace(Request.QueryString["datafine"]) ? "" : "datafine=" + Request.QueryString["datafine"] + "&",
                string.IsNullOrWhiteSpace(termIds) ? "" : "termids=" + termIds
                );
            url = url.TrimEnd('&');
            url = NormalizeUrl(url, prefix);
            Response.Redirect(url);
        }
    }
    var contentItems = Model.ContentItems;
    if (contentItems == null || (contentItems as IEnumerable<dynamic>).Count() == 0) {
    @T("No contents found!")
    }

}
@foreach (var item in contentItems) {
    @Display(BuildDisplay(item, "Summary").ListIndex(i))
    i++;
}
