@using NHibernate.Criterion;
@using NHibernate.Persister.Entity;
@using NHibernate.Transform;
@using Orchard.Core.Title.Models;
@using Orchard.Data;
@using Laser.Orchard.CulturePicker.Services;
@using Orchard.ContentManagement;

@{
    Layout.Title = Model.Title;
}

@* 
    check the query string and change the title accordingly:
    datainizio ==  datafine == today, the title is @T("Today's events")
    datainizio == today and datafine != today, the title is @T("Events between today and {0}", datafine)
    datainizio == datafine != today, the tile is @T("Events for {0}", datainizio)
    datainizio != today != datafine, the title is @T("Events between {0} and {1}", datainizio, datafine)
    if there is a category filter (termids) add to the title " - category"
*@

@{
    if (Model.Title == @T("Events").ToString()){
        var rQuery = WorkContext.HttpContext.Request.QueryString; //example "?datainizio=20/05/2016&datafine=20/05/2016&termids=33"
        string sDate = rQuery.Get("datainizio") ?? "";
        string eDate = rQuery.Get("datafine") ?? "";
        string titleString = "";
        DateTime startTime, endTime;
        if (DateTime.TryParse(sDate, out startTime) && DateTime.TryParse(eDate, out endTime)){
            if (startTime.Date == endTime.Date) {
                if (startTime.Date == DateTime.Today.Date) {
                    //<h1>@T("Today's events")</h1>
                    titleString = @T("Today's events").ToString();
                }
                else{
                    //<h1>@T("Events for {0}", startTime.Date.ToShortDateString())</h1>
                    titleString = @T("Events for {0}", startTime.Date.ToShortDateString()).ToString();
                }
            }
            else{
                //startTime != endTime
                if (startTime.Date == DateTime.Today.Date) {
                    //<h1>@T("Events between today and {0}", endTime.Date.ToShortDateString())</h1>
                    titleString = @T("Events between today and {0}", endTime.Date.ToShortDateString()).ToString();
                }
                else {
                    //<h1>@T("Events between {0} and {1}", startTime.Date.ToShortDateString(), endTime.Date.ToShortDateString())</h1>
                    titleString = @T("Events between {0} and {1}", startTime.Date.ToShortDateString(), endTime.Date.ToShortDateString()).ToString();
                }
            }
        }

        //TODO: for termids we should query the db for the correctly localized label
        string cat = rQuery.Get("termids");
        int tId;
        if (Int32.TryParse(cat, out tId)){
            //check wheter the query is correct for the language selected
            //Translating a term in a taxonomy spawns a new term id. It means that for example a Fair
            //in Italian has ID==140, while its translation has ID==167. It means that starting from
            //a search in one language, when we change language we should be changing the parameters 
            //of the search if we want to see the same results.
            ILocalizableContentService _localizableContentService;
            if (WorkContext.TryResolve<ILocalizableContentService>(out _localizableContentService)) {
                int tranId = 0;
                if (_localizableContentService.TryGetLocalizedId(tId, WorkContext.CurrentCulture, out tranId)) {
                    //ids have been translated
                    //parse the string for redirect
                    string oldUrl = WorkContext.HttpContext.Request.Url.PathAndQuery;
                    string newUrl = oldUrl.Substring(0, oldUrl.IndexOf("termids")+8);
                    newUrl += tranId.ToString();
                    newUrl += oldUrl.Substring(oldUrl.IndexOf("termids") + 8 + cat.Length);
                    WorkContext.HttpContext.RedirectLocal(newUrl);
                } else {
                    //Get the session to be able to actually execute the QueryOver
                    ISessionLocator _sessionLocator;
                    if (WorkContext.TryResolve<ISessionLocator>(out _sessionLocator)) {
                        //get the category corresponding to the given Id
                        var contentManager = WorkContext.Resolve<IContentManager>();
                        var what = contentManager.Query<TitlePart>().Where<TitlePartRecord>(tp => tp.ContentItemRecord.Id == tId).List();
                        //Search in the TItlePartRecord table for the element whose ContentItemRecor_Id matches tId
                        //QueryOver<TitlePartRecord, TitlePartRecord> qoTitle = QueryOver.Of<TitlePartRecord>()
                        //    .Where(tpr => tpr.ContentItemRecord.Id == tId)
                        //    .Select(tpr => tpr.Title);
                        //string categoryTitle = qoTitle.GetExecutableQueryOver(_sessionLocator.For(typeof(TitlePartRecord))).SingleOrDefault<string>();
                        titleString += " - " + what.FirstOrDefault().Title; // categoryTitle;
                    }
                }
            }            
        }
        <h1>@titleString</h1>
    }
    else{
        <h1>@Model.Title</h1>
    }
}
