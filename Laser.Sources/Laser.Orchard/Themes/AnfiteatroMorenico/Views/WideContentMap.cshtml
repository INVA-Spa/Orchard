@using Orchard.UI.Resources;
@using Orchard.MediaLibrary.Fields;
@using Orchard.ContentManagement;

@{
    var themeBasePath = Url.Content(Html.ThemePath(WorkContext.CurrentTheme, ""));
    var latitude = Model.ContentItem.MapPart.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture);
    var longitude = Model.ContentItem.MapPart.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture);
    var ID = Model.ContentItem.Id;
    var locationsList = new List<string>();
    var masterMapSourceFile = (MediaLibraryPickerField)((Laser.Orchard.Maps.Models.MapPart)Model.ContentItem.MapPart).Fields.SingleOrDefault(w => w.Name == "MapSourceFile");
    var masterMediaUrl = "";
    if (masterMapSourceFile != null && masterMapSourceFile.Ids.Length > 0 && masterMapSourceFile.MediaParts != null && masterMapSourceFile.MediaParts.Count() > 0) {
        masterMediaUrl = ((Orchard.MediaLibrary.Models.MediaPart)masterMapSourceFile.MediaParts.FirstOrDefault()).MediaUrl;
    }

    IEnumerable<Orchard.ContentManagement.ContentItem> contents = new List<Orchard.ContentManagement.ContentItem>();
    if (Model.ContentItem.ContentType == "Itinerario") {
        contents = Model.ContentItem.Itinerario.POIAssociati.ContentItems;
    }
    foreach (var content in contents) {
        var mapPart = ((dynamic)content).MapPart;
        if (mapPart != null) {
            var mapSourceFile = (MediaLibraryPickerField)((Laser.Orchard.Maps.Models.MapPart)mapPart).Fields.SingleOrDefault(w => w.Name == "MapSourceFile");
            var mediaUrl = "";
            if (mapSourceFile != null && mapSourceFile.Ids.Length > 0 && mapSourceFile.MediaParts != null && mapSourceFile.MediaParts.Count() > 0) {
                mediaUrl = ((Orchard.MediaLibrary.Models.MediaPart)mapSourceFile.MediaParts.FirstOrDefault()).MediaUrl;
            }

            locationsList.Add("['" + (mapPart.LocationInfo ?? "").Replace("'", "\\'") + "','" +
                (mapPart.LocationAddress ?? "").Replace("'", "\\'") + "', " +
                mapPart.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture) + ", " +
                mapPart.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture) + ", '" +
                Html.ItemDisplayLink(T("more").ToString(), (ContentItem)content).ToHtmlString() + "', '" +
                (String.IsNullOrWhiteSpace(mediaUrl) ? "" : WorkContext.CurrentSite.BaseUrl + mediaUrl) + "', '" +
                ((dynamic)content).TitlePart.Title.Replace("'", "\\'") +
                "']");
        }
    }
}
<div class="space-40"></div>
<div class="space-20"></div>
<div class="space-40 space-map"></div>
<div id="gmap">
</div>
@using (Script.Head()) {
    <script>
        var map;
        var image = '@(themeBasePath + "/styles/images/marker.png")';

        function initialize() {

            var featureOpts = [{ "featureType": "administrative", "elementType": "labels.text.fill", "stylers": [{ "color": "#444444" }] }, { "featureType": "landscape", "elementType": "all", "stylers": [{ "color": "#f2f2f2" }] }, { "featureType": "poi", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "road", "elementType": "all", "stylers": [{ "saturation": -100 }, { "lightness": 45 }] }, { "featureType": "road.highway", "elementType": "all", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "road.arterial", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "transit", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "water", "elementType": "all", "stylers": [{ "color": "#46bcec" }, { "visibility": "on" }] }];
            var mapOptions = {
                zoom: 16,
                center: new google.maps.LatLng(@(latitude), @(longitude)),
                scrollwheel: false,
                styles: featureOpts,
            };

            map = new google.maps.Map(document.getElementById('gmap'), mapOptions);

                            @if (!String.IsNullOrWhiteSpace(masterMediaUrl)) {
        <text>
            var ctaLayer = new google.maps.KmlLayer({
                url: '@WorkContext.CurrentSite.BaseUrl@(masterMediaUrl)'
            });
            ctaLayer.setMap(map);
            </text>
                            }

            @if (locationsList.Count() == 0) {
                <text>
            var infowindow = new google.maps.InfoWindow({
                content: '<h2>@Model.ContentItem.TitlePart.Title</h2><h3>@Model.ContentItem.MapPart.LocationInfo<br/>@Model.ContentItem.MapPart.LocationAddress</h3>'
            });

            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(@(latitude), @(longitude)),
                map: map,
                title: '@Model.ContentItem.TitlePart.Title.Replace("'", "\\'") ',
                animation: google.maps.Animation.DROP,
                icon: image,
            });


            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
            </text>
            } else {
                                <text>
            var bounds = new google.maps.LatLngBounds();
            var infowindow = new google.maps.InfoWindow();

            var locations = [
                @Html.Raw(String.Join(",", locationsList))
            ];

            var marker, i;

            for (i = 0; i < locations.length; i++) {  
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][2], locations[i][3]),
                    map: map,
                    title: locations[i][6],
                    animation: google.maps.Animation.DROP,
                    icon: image,
                });
                bounds.extend(marker.position);
                if (locations[i][5]!=""){
                    var ctaLayer = new google.maps.KmlLayer({
                        url: locations[i][5]
                    });
                    ctaLayer.setMap(map);
                }

                google.maps.event.addListener(marker, 'click', (function(marker, i) {
                    return function() {
                        infowindow.setContent(
                            '<h2>'+locations[i][6]+'</h2><h3>'+(locations[i][0])+'<br/>'+locations[i][1]+'</h3>'
                            );
                        infowindow.open(map, marker);
                    }
                })(marker, i));
            }
            map.fitBounds(bounds);
            </text>
            }
        
        }
        google.maps.event.addDomListener(window, 'load', initialize);

        $( document ).ready(function() {
            $("nav[role='navigation']" ).first().addClass("background articolo");
        });
</script>
}