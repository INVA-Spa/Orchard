@{
    var userName = Request.QueryString["UserName"];
    var externalLoginData = Request.QueryString["ExternalLoginData"];
}
<div class="row">
    <div class="col-sm-9 form-box">
        <h3>@Html.TitleForPage(T("Create a New Account").ToString())</h3>
        @if (!string.IsNullOrWhiteSpace(userName) && !string.IsNullOrWhiteSpace(externalLoginData)) {
            <p>@T("This user account will be linked to <b>{0}</b> when you login.", userName)</p>
        }
        <div class="form-top">

            <p>@T("Use the form below to create a new account.")</p>
            <p>@T("Passwords are required to be a minimum of {0} characters in length.", ViewData["PasswordLength"])</p>
            @Html.ValidationSummary(T("Account creation was unsuccessful. Please correct the errors and try again.").ToString())

        </div>
        <div class="form-bottom">

            @using (Html.BeginFormAntiForgeryPost()) { 
                <div class="form-group">
                    <label class="sr-only" for="form-username">@T("Username:")</label>
                    @Html.TextBox("username", "", new { id = "form-username", autofocus = "autofocus", placeholder = T("Username")+"...", @class = "form-username form-control" })
                    @Html.ValidationMessage("username")
                </div>
                <div class="form-group">
                    <label class="sr-only" for="form-email">@T("Email:")</label>
                    @Html.TextBox("email", "", new { id = "form-email", autofocus = "autofocus", placeholder = T("Email")+"...", @class = "form-email form-control" })
                    @Html.ValidationMessage("email")
                </div>
                <div class="form-group">
                    <label class="sr-only" for="form-password">@T("Password:")</label>
                    @Html.Password("password", "", new { id = "form-password", autofocus = "autofocus", placeholder = T("Password")+"...", @class = "form-password form-control" })
                    @Html.ValidationMessage("password")
                </div>
                <div class="form-group">
                    <label class="sr-only" for="form-confirmPassword">@T("Confirm password:")</label>
                    @Html.Password("confirmPassword", "", new { id = "form-confirmPassword", autofocus = "autofocus", placeholder = T("Confirm password")+"...", @class = "form-confirmPassword form-control" })
                    @Html.ValidationMessage("confirmPassword")
                </div>
                if (Model.UserProfile != null) { // if UserProfile && ExtendedRegistration are enabled, it shows all user parts/fields
                <div class="form-group">
                    @Display(Model.UserProfile)
                </div>
                }
                <div class="form-group">
                    <button class="btn" type="submit">@T("Register")</button>
                </div>
            }
        </div>

    </div>
</div>

@if (Model.UserProfile != null) {
    Script.Require("jQuery");
    using (Script.Foot()) {
        // calling EditorFor(Part) -> will render a Publish button
        // in this case we don't have a publish button, so we just hide it!
    <script type="text/javascript">
        jQuery(function ($) {
            $('.save-button').hide();
        });
    </script>
    }
}

