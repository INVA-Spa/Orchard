@using Orchard.Core.Contents.ViewModels
@using Orchard.ContentManagement
@using Orchard.ContentManagement.MetaData

@{
    Script.Require("SelectableContentTab");

    var typeDisplayName = Model.TypeDisplayName;
    var pageTitle = T("Recent Content");

    if (!string.IsNullOrWhiteSpace(typeDisplayName)) {
        pageTitle = T("Manage {0} Content", typeDisplayName);
    }

    IEnumerable<string> cultures = Model.Options.Cultures;

    Layout.Title = pageTitle;

}

<div class="manage">
</div>

@using (Html.BeginFormAntiForgeryPost()) {
    <fieldset class="bulk-actions">
        <label for="filterResults" class="bulk-filter">@T("Show")</label>
        <select id="filterResults" name="Options.SelectedFilter">
            @Html.SelectOption((string)Model.Options.SelectedFilter, "", T("any (show all)").ToString())
            @foreach (var filterOption in Model.Options.FilterOptions) {
                @Html.SelectOption((string)Model.Options.SelectedFilter, (string)filterOption.Key, (string)filterOption.Value)
            }
        </select>

        @if (cultures.Count() > 1) {
            <label for="filterCultures" class="bulk-culture">@T("Culture")</label>
            <select id="filterCultures" name="Options.SelectedCulture">
                @Html.SelectOption((string)Model.Options.SelectedCulture, "", T("any (show all)").ToString())
                @foreach (string culture in cultures) {
                    @Html.SelectOption((string)Model.Options.SelectedCulture, culture, System.Globalization.CultureInfo.GetCultureInfo(culture).DisplayName)
                }
            </select>
        }

        <label for="orderResults" class="bulk-order">@T("Ordered by")</label>
        <select id="orderResults" name="Options.OrderBy">
            @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Created, T("recently created").ToString())
            @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Modified, T("recently modified").ToString())
            @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Published, T("recently published").ToString())
        </select>
        <button type="submit" name="submit.Filter" value="yes please">@T("Apply")</button>
    </fieldset>
    <fieldset class="contentItems bulk-items">
        @{bool HideNormalContentPicker = false;
            var part = WorkContext.HttpContext.Request.QueryString["part"];
            var field = WorkContext.HttpContext.Request.QueryString["field"];
            if (!String.IsNullOrEmpty(part) && !String.IsNullOrEmpty(field)) {
                IContentDefinitionManager _contentDefinitionManager;
                WorkContext.TryResolve<IContentDefinitionManager>(out _contentDefinitionManager);

                var definition = _contentDefinitionManager.GetPartDefinition(part).Fields.FirstOrDefault(x => x.Name == field);
                if (definition != null) {
                    var settings = definition.Settings.GetModel<Laser.Orchard.StartupConfig.Settings.ContentPickerFieldExtensionSettings>();
                    if (settings != null) {
                        if (!string.IsNullOrEmpty(settings.SummaryView)) {
                            HideNormalContentPicker = true;
                            @Html.Partial(settings.SummaryView)
                        }
                    }

                }
            }
            if (!HideNormalContentPicker) {
                @Display(Model.ContentItems)
                }
            }

        </fieldset>
        @Html.Link(T("Add Selected").Text, "#", new { @class = "button addSelected" })
            @Display(Model.Pager)
        }

