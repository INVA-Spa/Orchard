@model dynamic
@using Orchard.Security;
@using Orchard.DisplayManagement.Descriptors;
@using Orchard.UI.Resources;
@using Orchard;
@using Orchard.ContentManagement;
@using Orchard.Utility.Extensions;
@using Orchard.Environment.Configuration;


@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme moved to Document.cshtml
    ***************************************************************/


    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/
    WorkContext.Layout.Logo.Add(New.Branding(), "1");
    //WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    //WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    Model.Classes.Add("main-bg");
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var subthemePath = Url.Content("~/Themes/KrakeDefaultTheme/Styles");

    ShellSettings _shellsettings;
    WorkContext.TryResolve<ShellSettings>(out _shellsettings);
    string tenantname = _shellsettings.Name;

    if (Model.Title != null) {
        Model.Header.Add(Display.Title(Title: Model.Title));
    }
    
}

<header>
    <div class="container container-header">
        <div class="row">
            <div class="col-xs-0 col-md-4"></div>
            <div class="col-xs-12 col-md-4 text-center">
                <a href="~/">
                    <img src="@subthemePath/images/logo.png" alt="krakelogo" class="img-responsive"/></a>
            </div>
            <div class="col-xs-0 col-md-4"></div>
        </div>
        <div class="space-20"></div>
        @if (Model.Navigation != null) { 
            @Zone(Model.Navigation)
        }
    </div>
</header>
<div class="container">
    @if (Model.Messages != null) {
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                @Zone(Model.Messages)
            </div>
        </div>
    }
    @if (Model.Content != null) { 
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                @Zone(Model.Content)
            </div>
        </div>

    }
</div>
<div id="footer">
    <div class="container container-footer">
        <div class="footer-text">Powered by Laser S.r.l.</div>
    </div>
</div>
<script>
    function colorCheckbox() {
        if (jQuery('label span').hasClass('accepted')) {
            jQuery('label span').removeClass('accepted');
            jQuery('label span').text('@T("I Disagree")');
        } else {
            jQuery('label span').addClass('accepted');
            jQuery('label span').text('@T("I Agree")');
        }
    }

</script>
