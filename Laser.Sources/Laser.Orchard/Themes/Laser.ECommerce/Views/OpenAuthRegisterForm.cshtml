@using Orchard.ContentManagement
@using Orchard.Security
@{
    var userName = Request.QueryString["UserName"];
    var externalLoginData = Request.QueryString["ExternalLoginData"];
    var _membershipService = WorkContext.Resolve<IMembershipService>();
    var passwordLength = _membershipService.GetSettings().MinRequiredPasswordLength;

    var returnUrl = Request.QueryString["ReturnUrl"];

    var _contentManager = WorkContext.Resolve<IContentManager>();
    dynamic userProfile = null;
    var user = _contentManager.New("User");
    if (user != null) {
        userProfile = _contentManager.BuildEditor(user);
    }
}

<div class="facts">
    <div class="register">
        @using (Html.BeginFormAntiForgeryPost(
                Url.Action("Register", "Account",
                    new {
                        area = "Users",
                        ReturnUrl = returnUrl,
                        UserName = userName,
                        ExternalLoginData = externalLoginData
                    }))) {
            <div class="no-margin">
                <p>@T("Passwords are required to be a minimum of {0} characters in length.", passwordLength)</p>
                @Html.ValidationSummary(T("Account creation was unsuccessful. Please correct the errors and try again.").ToString())
            </div>
            @Html.TextBox("username", "", new { id = "form-username", autofocus = "autofocus", placeholder = T("Username") + "...", @class = "form-username input-text form-control" })
            @Html.ValidationMessage("username")
            <div class="space-20"></div>
            @Html.TextBox("email", "", new { id = "form-email", autofocus = "autofocus", placeholder = T("Email") + "...", @class = "form-email input-text form-control" })
            @Html.ValidationMessage("email")
            <div class="space-20"></div>
            @Html.Password("password", "", new { id = "form-password", autofocus = "autofocus", placeholder = T("Password") + "...", @class = "form-password input-text form-control" })
            @Html.ValidationMessage("password")
            <div class="space-20"></div>
            @Html.Password("confirmPassword", "", new { id = "form-confirmPassword", autofocus = "autofocus", placeholder = T("Confirm password") + "...", @class = "form-confirmPassword input-text form-control" })
            @Html.ValidationMessage("confirmPassword")
            if (userProfile != null) { // if UserProfile && ExtendedRegistration are enabled, it shows all user parts/fields
                <hr />
                @Display(userProfile)
                <hr />
            }

            <input type="submit" class="submit" value="@T("Sign Up")">
        }
    </div>
</div>

@if (userProfile != null) {
    Script.Require("jQuery");
    using (Script.Foot()) {
        // calling EditorFor(Part) -> will render a Publish button
        // in this case we don't have a publish button, so we just hide it!
        <script type="text/javascript">
        jQuery(function ($) {
            $('.save-button').hide();
        });
        </script>
    }
}