@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme moved to Document.cshtml
    ***************************************************************/


    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/
    WorkContext.Layout.Logo.Add(New.Branding(), "1");
    //WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    //WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    Model.Classes.Add("main-bg");
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var themeBasePath = Url.Content(Html.ThemePath(WorkContext.CurrentTheme, ""));

    // verifica che la campagna sia attiva
    bool campagnaNonAttiva = false;
    try {
        var campagna = Model.TitleZone.Items[0].ContentItem;
        string cType = campagna.ContentType;
        switch(cType) {
            case "Questionnaire":
                campagnaNonAttiva = true;
                break;
            case "Campagna":
                if ((DateTime.Today < campagna.ActivityPart.DateTimeStart)
                    || (DateTime.Today > campagna.ActivityPart.DateTimeEnd)) {
                    campagnaNonAttiva = true;
                }
                break;
        }
    } catch {
        // nasconde volutamente eventuali errori: campagnaNonAttiva rimane uguale a false
    }
}
<div class="space-20"></div>
<div class="container">
    <div class="row">
        <div class="col-xs-12 col-sm-4 logo-header">
            <img src="@(themeBasePath + "/styles/img/logoquerstionario.png")" alt="logo" class="img-responsive"/>
        </div>
        <div class="col-xs-12 col-sm-8">
            <div class="header-box">
                <span class="header-testo">Cassa Nazionale di Previdenza ed Assistenza per gli Ingegneri ed Architetti Liberi Professionisti</span>
            </div>
        </div>
    </div>
</div>
@if (campagnaNonAttiva) {
        <div class="space-10"></div>
        <div class="text-center bg-pink">
                @T("No data found.")
        </div>
}
else{
    if (Model.TitleZone != null)
    {
        <div class="space-10"></div>
        <div class="text-center bg-pink">
                @Zone(Model.TitleZone)
        </div>
    }
    if (Model.Content != null)
    {
        <div class="container">
            <div class="space-40"></div>
            @Zone(Model.Content)
        </div>
    }
}